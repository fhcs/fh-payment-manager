@startuml
'https://plantuml.com/class-diagram

header %date("dd MMMM YYYY")
footer Page %page% of %lastpage%

title Purchases

namespace Model {
    entity OrderItem {
        id: Int
        name: String
        price: Float = 0.00
        quantity: Int = 1
        details: Json
        order_id: Uuid
    }
    entity Order {
        id: UUID
        amount: Float
        total: Int
        status: OrderStatus
        created: Date
        updated: Date
        addOrderItem(PayableProduct)
        items(): Collection <<OrderItem>>
        invoice(): Invoice
    }
    entity Customer {
        account: String {id}
        email:String
        phone: String
        invoices(): Collection <<Invoice>>
    }
    entity Invoice {
        id: int
        payment: Payment
        closed: Date
        created: Date
        updated: Date
        customer(): Customer
        order(): Order
        getOrderId(): String
    }
}

object Payment {
    id: Int
    status: PaymentStatus
}
enum PaymentStatus {
    NEW = 'новый'
    SENT = 'в оплате'
    END = 'оплачен'
    REF = 'возвращён'
    EXP = 'просрочен'
    HOLD = 'холд'
    CANCELED = 'отменен'
    ERR = 'ошибка'
    REJ = 'отвергнут'
    UNDEF = 'не определен'
}

interface PayableProduct {
    getName(): String
    getPrice(): Float
}
interface PayableCustomer {
    getAccount(): String
    getEmail(): String
    getPhone(): String
}

namespace Factory {
    class OrderFactory {
        createOrder(PayableProduct): Order
    }
    class CustomerFactory {
        defineCustomer(PayableCustomer): Customer
    }
    class InvoiceFactory {
        createInvoice(PayableCustomer, PayableProduct): Invoice
    }
}


class PaymentService {
    paymentRequest: PaymentRequest
    createRequestQuery(queryBuilderClass: String, ...params): QueryBuilder
    checkPayment(invoiceId: UUID, ...params): PaymentResponse
    getPayments(...params): PaymentResponse
}
abstract QueryBuilder
interface PaymentRequest {
    send(): PaymentResponse
}

'interface PaymentResponse
'enum OrderStatus

OrderItem }--* Order
Order -* Invoice
Customer --* Invoice
Invoice *.. Payment

PaymentStatus . Payment

PayableProduct .down.o Factory.InvoiceFactory
PayableCustomer .down.o Factory.InvoiceFactory

Factory.InvoiceFactory o.down.|> Factory.CustomerFactory
Factory.InvoiceFactory o.down.|> Factory.OrderFactory

'PayableCustomer <|... Customer
'PayableProduct }..o OrderFactory
'OrderFactory --> Order: create

'Customer ..o InvoiceFactory
'Order ..o InvoiceFactory
'Order .OrderStatus

'PaymentService o.. Invoice
'Invoice <- InvoiceFactory: create
'PaymentStatus . Payment

PaymentService o--> QueryBuilder
PaymentService o--> PaymentRequest

@enduml